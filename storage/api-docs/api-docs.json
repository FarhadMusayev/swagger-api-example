{
    "openapi": "3.0.0",
    "info": {
        "title": "Laravel OpenApi V1 Demo Documentation",
        "description": "L5 Swagger OpenApi description",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "admin@admin.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Demo API Server"
        },
        {
            "url": "http://127.0.0.1:8000/api/",
            "description": "Development Environment"
        },
        {
            "url": "http://127.0.0.1:9000/api/",
            "description": "Staging  Environment"
        }
    ],
    "paths": {
        "/api/v1/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Post your email and password and we will return a token. Use the token in the 'Authorization' header like so 'Bearer YOUR_TOKEN'",
                "description": "Post your email and password and we will return a token.",
                "operationId": "login",
                "requestBody": {
                    "description": "The Token Request",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "your@email.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "YOUR_PASSWORD"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "true"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": {
                                                "name": "Rehim Alcanov",
                                                "email": "rehimalcanov@mail.ru",
                                                "updated_at": "2022-07-20T10:57:41.000000Z",
                                                "created_at": "2022-07-20T10:57:41.000000Z",
                                                "id": "4"
                                            }
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "5|J9pEuB8PtCd2gNY24kkMLRthbbfI884UE0be7QSc"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "The provided credentials are incorrect."
                    },
                    "401": {
                        "description": "The provided credentials are unauthorized."
                    }
                }
            }
        },
        "/api/v1/auth/user": {
            "get": {
                "tags": [
                    "auth"
                ],
                "summary": "Get user by id",
                "description": "Returns a single new user.",
                "operationId": "getUserByToken",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "type": "object",
                                            "example": {
                                                "id": "4",
                                                "name": "Rehim Alcanov",
                                                "email": "rehimalcanov@mail.ru",
                                                "email_verified_at": "2022-07-20T10:24:56.000000Z",
                                                "updated_at": "2022-07-20T10:57:41.000000Z",
                                                "created_at": "2022-07-20T10:57:41.000000Z"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The provided credentials are unauthorized."
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/api/v1/logout": {
            "delete": {
                "tags": [
                    "auth"
                ],
                "summary": "Logout User",
                "description": "This can only be done by the logged in user.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "true"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/api/v1/register": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Post your email and password and we will return a token. Use the token in the 'Authorization' header like so 'Bearer YOUR_TOKEN'",
                "description": "Post your email and password and we will return a token.",
                "operationId": "register",
                "requestBody": {
                    "description": "The Token Request",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "your@email.com"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "your@email.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "YOUR_PASSWORD"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "true"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": {
                                                "name": "Rehim Alcanov",
                                                "email": "rehimalcanov@mail.ru",
                                                "updated_at": "2022-07-20T10:57:41.000000Z",
                                                "created_at": "2022-07-20T10:57:41.000000Z",
                                                "id": "4"
                                            }
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "5|J9pEuB8PtCd2gNY24kkMLRthbbfI884UE0be7QSc"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "The provided credentials are incorrect."
                    },
                    "401": {
                        "description": "The provided credentials are unauthorized."
                    }
                }
            }
        },
        "/api/projects": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Get list of projects",
                "description": "Returns list of projects",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "projects"
                ],
                "summary": "Store new project",
                "description": "Returns project data",
                "operationId": "storeProject",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreProjectRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/api/projects/{id}": {
            "get": {
                "tags": [
                    "projects"
                ],
                "summary": "Get project information",
                "description": "Returns project data",
                "operationId": "getProjectById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "put": {
                "tags": [
                    "projects"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "projects"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        },
        "/api/upload/file": {
            "post": {
                "tags": [
                    "upload"
                ],
                "summary": "Upload files to the system.",
                "description": "Return path file on the system.",
                "operationId": "uploadFile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "path": {
                                            "type": "string",
                                            "example": "/images/emv4xlPGlave5OHNiENggdDa7j4VfiKPR6na2I6C.jpg"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Image is uploaded."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/upload/multiple-file": {
            "post": {
                "tags": [
                    "upload"
                ],
                "summary": "Upload files to the system.",
                "description": "Return path file on the system.",
                "operationId": "uploadMultipleFile",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "files[]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Images is uploaded."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get list user",
                "description": "Returns a single new user.",
                "operationId": "getListUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "example": {
                                                    "id": 1,
                                                    "name": "ManhDan",
                                                    "email": "danhuynh660@gmail.com"
                                                }
                                            }
                                        },
                                        "links": {
                                            "type": "object",
                                            "example": {
                                                "first": "http://127.0.0.1:8000/api/users?page=1",
                                                "last": "http://127.0.0.1:8000/api/users?page=1",
                                                "prev": null,
                                                "next": null
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "links": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "example": {
                                                            "url": "http://127.0.0.1:8000/api/users?page=1",
                                                            "label": "http://127.0.0.1:8000/api/users?page=1",
                                                            "active": null
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "example": "http://127.0.0.1:8000/api/users"
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 10
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Add a new user to the store",
                "description": "Returns a single new user.",
                "operationId": "createUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The specified data is invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": "The name field is required."
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{userId}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user id",
                "description": "Returns a single user.",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "Returns a single user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User that to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User object needs to be updated to the store.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "password": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The specified data is invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": "The name field is required."
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Delete user successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "StoreProjectRequest": {
                "title": "Store Project request",
                "description": "Store Project request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of the new project",
                        "type": "string",
                        "example": "This is new project's description"
                    },
                    "author_id": {
                        "title": "author_id",
                        "description": "Author's id of the new project",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateProjectRequest": {},
            "ProjectResource": {
                "title": "ProjectResource",
                "description": "Project resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Project"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ProjectResource"
                }
            },
            "Project": {
                "title": "Project",
                "description": "Project model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description of the new project",
                        "type": "string",
                        "example": "This is new project's description"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "author_id": {
                        "title": "Author ID",
                        "description": "Author's id of the new project",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Project"
                }
            },
            "User": {
                "required": [
                    "id",
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "password": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearer_token": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "auth",
            "description": "Operations about auth user",
            "externalDocs": {
                "description": "Find out more about store",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about store",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "upload",
            "description": "Operations about file",
            "externalDocs": {
                "description": "Find out more about store",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "projects",
            "description": "Operations about projects",
            "externalDocs": {
                "description": "Find out more about store",
                "url": "http://swagger.io"
            }
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}